#!/usr/bin/env bash

# Set the script to exit immediately if any command exits with a non-zero status
set -e

# Extract the name of the script without the path
cli_name="${0##*/}"

# Source a common library file from the specified location
source "$CLI_WORKDIR/lib/common"

if check_for_new_release; then
    echo $'please use:\tsamLi update'
fi

# Function to print basic usage information
cli_help() {
    cli_usage
    exit 1
}

debug() {
    if [ ! -n $DEBUG ]; then
        echo "$1"
    fi
}

# Function to print detailed usage information
cli_usage() {
    COMMANDS=$(ls) # This should probably be changed to COMMANDS=$(ls)
    echo "
Usage: $cli_name [OPTIONS] --env <TEST_ENV> <functionName>

Available options:
        --env,      environment's name
   -c | --config,   config file (YAML)
   -e | --event,    event's path from the function's folder. (JSON)
   -l | --local,    local environments variables's path from the project's folder. (JSON)
   -n | --no-build, skip building the template
   -d | --debug,    debug features
   -h | --help,     for help
"
}

# Array to store positional arguments
POSITIONAL_ARGS=()
DEBUG_FLAG=""

# Loop through command-line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
    -c | --config)
        CONFIG_PATH="$2"
        shift 2 # skip both the argument and its value
        ;;
    -l | --local)
        LOCAL_ENV_PATH="$2"
        shift 2 # skip both the argument and its value
        ;;
    -e | --event)
        EVENT="$2"
        shift 2 # skip both the argument and its value
        ;;
    --env)
        TEST_ENV="$2"
        shift 2 # skip both the argument and its value
        ;;
    -n | --no-build)
        NO_BUILD=true
        shift # skip the argument
        ;;
    -d | --debug)
        DEBUG_FLAG="--debug"
        shift # skip the argument
        ;;
    -h | --help)
        cli_help
        ;;
    -* | --*)
        echo "Unknown option $1"
        cli_help
        ;;
    *)
        POSITIONAL_ARGS+=("$1") # save positional arg
        shift                   # skip the argument
        ;;
    esac
done

# Restore positional parameters
set -- "${POSITIONAL_ARGS[@]}"
CONFIG_DEFAULT_FILE_NAME=".samliconfig.yaml"
CONFIG_DEFAULS_FILE_PATH="$CLI_WORKDIR/$CONFIG_DEFAULT_FILE_NAME"

if [ -z "$CONFIG_PATH" ]; then
    if [ ! -e "$CONFIG_DEFAULS_FILE_PATH" ]; then
        echo "Error: <CONFIG_PATH> is required."
        cli_usage
        read -p "Enter the config path: " CONFIG_PATH
    else
        CONFIG_PATH=$CONFIG_DEFAULS_FILE_PATH
    fi
fi

readConfigFile $CONFIG_PATH

# Check if a function name is provided
if [[ -n $1 ]]; then
    LAMBDA_NAME=$1
fi

# Check if function name is missing
if [ -z "$LAMBDA_NAME" ]; then
    echo "Error: <functionName> is required."
    cli_usage
    read -p "Enter the function name: " LAMBDA_NAME

fi

# # Check if test environment is missing
if [ -z "${TEST_ENV}" ]; then
    echo "Error: <TEST_ENV> is required."
    cli_usage
    read -p "Enter the test environment name: " TEST_ENV

fi

# # Construct the full path to the Lambda function
LAMBDA_PATH="$PROJECT_PATH/$HANDLERS_PATH/$LAMBDA_NAME"

# # Check if the Lambda function file exists
if [ ! -e "$LAMBDA_PATH/index.ts" ]; then
    error "ðŸ›‘ File '$LAMBDA_PATH/index.ts' does not exist. Performing additional actions."
fi

# Options for SAM Local invocation
EVENT_OPTS=""
if [[ -n "$EVENT" ]]; then
    if [ -e "$LAMBDA_PATH/$EVENT" ]; then
        EVENT_OPTS="-e $LAMBDA_PATH/$EVENT"
    fi
else
    # Check for event configuration files
    if [ -e "$LAMBDA_PATH/event.json" ]; then
        EVENT_OPTS="-e $LAMBDA_PATH/event.json"
    fi
fi

if [ -z "${EVENT_OPTS}" ]; then
    error "ðŸ›‘ No corresponding event found in $LAMBDA_PATH/$EVENT_OPTS"
fi

# Check for local (env vars) configuration files
LOCAL_OPTS=""
if [[ -n "$LOCAL_ENV_PATH" ]]; then
    if [ -e "$LAMBDA_PATH/$LOCAL_ENV_PATH" ]; then
        LOCAL_OPTS="-n $LAMBDA_PATH/$LOCAL_ENV_PATH"
    fi
else
    if [ -e "$LAMBDA_PATH/local.json" ]; then
        LOCAL_OPTS="-n $LAMBDA_PATH/local.json"
    fi
    if [ -e "$LAMBDA_PATH/local-$TEST_ENV.json" ]; then
        LOCAL_OPTS="-n $LAMBDA_PATH/local-$TEST_ENV.json"
    fi

fi
if [ -z "${LOCAL_OPTS}" ]; then
    error "ðŸ›‘ No corresponding local found in $LAMBDA_PATH/$LOCAL_OPTS"

fi

# Modify Lambda stack name for functions containing "resolver" because they have env name in their names
if [[ $LAMBDA_NAME == *"resolver"* ]]; then
    prefix="${LAMBDA_NAME%%-resolver*}"
    new_word="$(tr '-' '\n' <<<"$prefix" | awk '{print toupper(substr($0,1,1)) tolower(substr($0,2))}' | tr -d '\n')-resolver"
    LAMBDA_STACKNAME="$new_word-$TEST_ENV"
else
    LAMBDA_STACKNAME="$LAMBDA_NAME"
fi

CDK_TEMPLATE_NAME="$CDK_APPNAME-$TEST_ENV.template.json"

CDK_FOLDER_PATH="$PROJECT_PATH/$CDK_FOLDER_NAME"
CDK_TEMPLATE_PATH="$CDK_FOLDER_NAME/$CDK_TEMPLATE_NAME"
# timestamp=$(date +%T)
# # LOGS_PATH=$CLI_WORKDIR/logs$PROJECT_PATH

# Synthesize AWS CloudFormation template and invoke Lambda function locally
if [ "$NO_BUILD" != true ]; then
    # # --app is required either in command-line, in cdk.json or in ~/.cdk.json,
    # # so we just navigate to the project folder
    cd $PROJECT_PATH &&
        cli_log "Building template" &&
        ENV="$TEST_ENV" npx cdk synth --quiet --output $CDK_FOLDER_NAME &&
        (cli_log "Building template succeeded âœ…") ||
        (echoerror "Building template failed ðŸ›‘")
else
    if [ ! -e "$CDK_TEMPLATE_PATH" ]; then
        echoerror "You may need to synth your CDK template"
        echoerror "Its not found in $CDK_TEMPLATE_PATH"
    fi
fi

cli_log "#####Testing: '$LAMBDA_STACKNAME' in '$TEST_ENV'######"

(debug "Local options: '$LOCAL_OPTS'" &&
    debug "Event options: '$EVENT_OPTS'") &&
    (
        ENV="$TEST_ENV" sam local invoke $LAMBDA_STACKNAME \
            $EVENT_OPTS \
            $LOCAL_OPTS \
            $DEBUG_FLAG \
            --template $CDK_TEMPLATE_PATH
    ) &&
    if [ "$NO_BUILD" != true ]; then
        cd $PROJECT_PATH && rm -rf "$CDK_FOLDER_PATH" || debug 'Folder not found'
    fi
