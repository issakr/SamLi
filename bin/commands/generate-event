#!/usr/bin/env bash

# Set the script to exit immediately if any command exits with a non-zero status
set -e

# Extract the name of the script without the path
cli_name="${0##*/}"

# Source a common library file from the specified location
source "$CLI_WORKDIR/lib/common"

# Import a configuration file
importFile "$CLI_WORKDIR/../.conf"

# Function to print basic usage information
cli_help() {
    cli_usage
    exit 1
}

# Function to print basic usage information
cli_usage() {
    echo "Usage: $cli_name <fieldName> [--api-key <API_KEY>] [--input <INPUT_JSON>] [--output <OUTPUT_PATH>]" >&2
}
while [[ $# -gt 0 ]]; do
    case $1 in
    -i | --input)
        input_json="$2"
        shift 2 # skip both the argument and its value
        ;;
    -t | --type)
        OPERATION_TYPE="$2"
        shift 2 # skip both the argument and its value
        ;;
    -key | --api-key)
        API_KEY="$2"
        shift 2 # skip both the argument and its value
        ;;
    -o | --output)
        OUTPUT_PATH="$2"
        shift 2 # skip the argument
        ;;
    -d | --debug)
        DEBUG_FLAG="--debug"
        shift # skip the argument
        ;;
    -h | --help)
        cli_help
        ;;
    -* | --*)
        echo "Unknown option $1"
        cli_help
        ;;
    *)
        POSITIONAL_ARGS+=("$1") # save positional arg
        shift                   # skip the argument
        ;;
    esac
done
# Restore positional parameters
set -- "${POSITIONAL_ARGS[@]}"

# Extract positional arguments
fieldName="${POSITIONAL_ARGS[0]}"

# Validate required arguments
if [ -z "$fieldName" ]; then
    echo "Error: Missing fieldName." >&2
    cli_usage
    exit 1
fi

# Validate required API key
if [ -z "$API_KEY" ]; then
    echo "Error: Missing API key." >&2
    cli_usage
    exit 1
fi

input_map=$(echo "$input_json" | jq -r 'to_entries | map("\(.key)=\(.value)") | join(" ")')

# Define the JSON content using a heredoc
EVENT_JSON=$(
    cat <<EOF
{
    "arguments": {
        $(if [ -n "$input_map" ]; then
        for pair in $input_map; do echo "\"${pair%%=*}\": \"${pair#*=}\","; done
    else
        echo -n "" # Empty object if no input provided
    fi)
    },
    "identity": null,
    "source": null,
    "request": {
        "headers": {
            "x-api-key": "$API_KEY"
        },
        "domainName": null
    },
    "prev": null,
    "info": {
        "selectionSetList": [],
        "selectionSetGraphQL": "",
        "fieldName": "$fieldName",
        "parentTypeName": "$OPERATION_TYPE",
        "variables": {}
    },
    "stash": {}
}
EOF
)

# Remove the trailing comma from the last attribute in the input object
if [ -n "$input_map" ]; then
    EVENT_JSON=$(echo "$EVENT_JSON" | awk '{if (match($0, /"entityStatus"/)) sub(/,$/, ""); print}')
fi

FINAL_OUTPUT_PATH="event-$fieldName.json"

if [ -n "$OUTPUT_PATH" ]; then
    # Set necessary permissions for the output file
    chmod +w "$OUTPUT_PATH"

    FINAL_OUTPUT_PATH="$OUTPUT_PATH/$FINAL_OUTPUT_PATH"
    # Output the JSON content to a file
fi
echo "$EVENT_JSON" >"$FINAL_OUTPUT_PATH"
echo "JSON output saved to: '$FINAL_OUTPUT_PATH"
